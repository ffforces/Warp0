class:: Warp0
summary:: Warp a buffer with a warp factor.
related::  Classes/Warp1
categories:: UGens>Buffer, UGens>Generators>Granular

description::

Inspired by Chad Kirby's SuperCollider2 Warp1 class, which was inspired by Richard Karpen's sndwarp for CSound. A granular time strecher and pitchshifter.


classmethods::
private:: categories

method:: ar
argument::numChannels
the number of channels in the buffer.

argument::bufnum
the buffer number of a mono soundfile.

argument::warpFactor
amount to stretch or compress the buffer. 0.5 is half speed, 2 is twice the speed.

argument::freqScale
the amount of frequency shift. 1.0 is normal, 0.5 is one octave down, 2.0 is one octave up.

		Negative values play the soundfile backwards.

argument::windowSize
the size of each grain window.

argument::envbufnum
the buffer number containing a signal to use for the grain envelope. -1 uses a built-in
Hanning envelope.

argument::overlaps
the number of overlapping windows.

argument::windowRandRatio
the amount of randomness to the windowing function.  Must be between 0 (no
randomness) to 1.0 (probably too random actually)

argument::interp
the interpolation method used for pitchshifting grains. 1 = no interpolation. 2 = linear.

		4 = cubic interpolation (more computationally intensive).

argument::mul

argument::add

Examples::
code::

s.boot;


(

SynthDef(\warp, {arg buffer = 0;

	var out, filelength, env;

	env = EnvGen.kr(Env([0.01, 1, 1, 0.01], [0.1, 14, 0.9], 'exp'), doneAction: 2);

	//warp factor of 0.25- stretch sound by 4 times

	out = Warp0.ar(1, buffer, 0.25, MouseX.kr(0.25, 4), 0.1, -1, 8, 0.05, 1);

	Out.ar(0, (out * env)!2);

}).add;


)

b = Buffer.read(s, Platform.resourceDir +/+ "sounds/a11wlk01-44_1.aiff");


a = Synth(\warp, [\buffer, b]);

a.free;

::

code::
(

SynthDef(\warp, {arg buffer = 0;

	var out, warp, filelength, env, freq;

	warp = MouseX.kr(0, 1);

	freq = MouseY.kr(0.5, 4);

	env = EnvGen.kr(Env([0.01, 1, 1, 0.01], [0.1, 14, 0.9], 'exp'), doneAction: 2);

	out = Warp0.ar(1, buffer, warp, freq, 0.1, -1, 8, 0.05, 1);

	Out.ar(0, (out * env)!2);

}).add;


)


a = Synth(\warp, [\buffer, b]);

a.free;

b.free;
::
